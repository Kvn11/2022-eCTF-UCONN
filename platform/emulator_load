#!/usr/bin/python3

# 2022 eCTF
# Load Bootloader Image into Emulator - this process is fair-game for trojan attacks
# Jake Grycel
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# DO NOT CHANGE THIS FILE


import os
import time
import argparse
import logging
import subprocess
from bl_interface import Sock
from enum import Enum
from pathlib import Path


log = logging.getLogger(__name__)

SOCKET = "/uart.sock"

APP_PAGES = 115
EEPROM_PAGES = 2
PAGE_SIZE = 1024
APP_SIZE = APP_PAGES * PAGE_SIZE
BLOCK_SIZE = 16
APP_BLOCKS = APP_SIZE // BLOCK_SIZE
EEPROM_SIZE = EEPROM_PAGES * PAGE_SIZE
EEPROM_BLOCKS = EEPROM_SIZE // BLOCK_SIZE
TOTAL_SIZE = APP_SIZE + EEPROM_SIZE
TOTAL_PAGES = APP_PAGES + EEPROM_PAGES
TOTAL_BLOCKS = APP_BLOCKS + EEPROM_BLOCKS


class DataSock:
    """
    Basic Sock wrapper class to handle sending buffers and reading single bytes
    """
    def __init__(self, sock: Sock):
        self.sock = sock
        self.buf = b''

    def get_byte(self) -> bytes:
        while len(self.buf) == 0:
            data = self.sock.read_msg()
            if data is not None:
                self.buf = data

        ret = self.buf[0]
        self.buf = self.buf[1:]
        return bytes([ret])

    def send_data(self, data: bytes):
        while not self.sock.send_msg(data):
            pass


class Code(Enum):
    """
    Bootstrapper update process codes
    """
    RequestUpdate = b"\x00"
    StartUpdate = b"\x01"
    UpdateInitFlashEraseOK = b"\x02"
    UpdateInitEEPROMEraseOK = b"\x03"
    UpdateInitEEPROMEraseError = b"\x04"
    AppBlockInstallOK = b"\x05"
    AppBlockInstallError = b"\x06"
    EEPROMBlockInstallOK = b"\x07"
    EEPROMBlockInstallError = b"\x08"
    AppInstallOK = b"\x09"
    AppInstallError = b"\x0a"


# Check for a specific response from the bootstrapper
def verify_resp(data_sock: DataSock, expected: Code):
    resp = data_sock.get_byte()
    assert Code(resp) == expected


# End the update by killing the emulator
def abort(emu_ps: subprocess.Popen):
    emu_ps.kill()
    emu_ps.wait()
    exit(1)


def main(in_file):

    # Remove existing Flash contents
    flash_bin = Path("/flash/flash.bin")
    if flash_bin.exists():
        flash_bin.unlink()

    # Remove exisiting EEPROM contents
    eeprom_bin = Path("/eeprom/eeprom.bin")
    if eeprom_bin.exists():
        eeprom_bin.unlink()

    # Open image
    log.info("Reading image file...")
    fw_file = Path(in_file)
    if not fw_file.exists():
        log.error(f"Firmware file {fw_file} not found.")
        return -1

    # Read image - check it is the right size
    fw_data = fw_file.read_bytes()
    fw_size = len(fw_data)
    if fw_size != TOTAL_SIZE:
        log.error(f"Invalid image size 0x{fw_size:X}. Expected 0x{TOTAL_SIZE:X}.")
        return -1

    # Make sure the socket does not already exist
    sock_path = SOCKET
    try:
        os.unlink(sock_path)
    except OSError:
        if os.path.exists(sock_path):
            raise

    # Open socket
    sock = Sock(sock_path, 0o777)
    data_sock = DataSock(sock)

    # Start emulator
    cmd = [
        "qemu-system-arm",
        "-M",
        "lm3s6965evb",
        "-nographic",
        "-monitor",
        "none",
        "-kernel",
        "/platform/bootstrapper_emu.elf",
        "-serial",
        f"unix:{sock_path}",
    ]
    emulator_ps = subprocess.Popen(cmd)

    # Wait for connection
    while not data_sock.sock.active():
        pass

    # Give bootstrapper time to start
    time.sleep(2)

    # Wait for bootstrapper ready
    log.info("Requesting update...")
    data_sock.send_data(Code.RequestUpdate.value)
    try:
        verify_resp(data_sock, Code.StartUpdate)
    except AssertionError:
        log.error("Bootloader did not start an update")
        abort(emulator_ps)

    # Send data in 16-byte blocks
    log.info("Sending firmware...")
    total_bytes = len(fw_data)
    block_count = 0
    i = 0
    while i < total_bytes:
        if ((block_count + 1) % 100) == 0:
            log.info(f"Sending block {block_count+1} of {TOTAL_BLOCKS}...")
        block_bytes = fw_data[i:i+BLOCK_SIZE]

        data_sock.send_data(block_bytes)

        try:
            if block_count < APP_BLOCKS:
                verify_resp(data_sock, Code.AppBlockInstallOK)
            else:
                verify_resp(data_sock, Code.EEPROMBlockInstallOK)

            i += BLOCK_SIZE
            block_count += 1
        except AssertionError:
            log.error(f"Install failed at block {block_count+1}.")
            abort(emulator_ps)

    # Wait for final OK
    try:
        verify_resp(data_sock, Code.AppInstallOK)
    except AssertionError:
        log.error("Image Failed to Install")
        abort(emulator_ps)
    else:
        log.info("Image Installed.")

    # Kill emulator
    emulator_ps.kill()
    emulator_ps.wait()

    return 0


# Run in application mode
if __name__ == "__main__":
    # configure logging
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s %(message)s")

    # Parse arguments
    parser = argparse.ArgumentParser(
        description=""
    )
    parser.add_argument("--infile", required=True, help="Path to the input binary")
    args = parser.parse_args()

    # load the image
    main(args.infile)
