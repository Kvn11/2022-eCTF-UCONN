#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Configuration Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import os
import argparse
import logging
from pathlib import Path
from util import print_banner, CONFIGURATION_ROOT, LOG_FORMAT, generate_signature, encrypt_chacha, read_bytes_from_file

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_configuration(raw_cfg: Path, protected_cfg: Path):
    print_banner("SAFFIRe Configuration Protect Tool")

    # Generate signature key:
    sig_key = os.urandom(32)

    # Read in the raw configuration binary
    log.info("Reading configuration data...")
    cfg_file_data = raw_cfg.read_bytes()

    # Read in the data key:
    data_key = read_bytes_from_file("/secrets/chacha_data.key")

    # Create signature:
    sig = generate_signature(cfg_file_data, data_key, sig_key)  

    log.info("Packaging the configuration...")

    # Write to the output file:
    protected_cfg.write_bytes(sig + cfg_file_data)


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input-file", help="The name of the configuration to protect.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected configuration.", required=True
    )

    args = parser.parse_args()

    # process command
    raw_cfg = CONFIGURATION_ROOT / args.input_file
    protected_cfg = CONFIGURATION_ROOT / args.output_file
    protect_configuration(raw_cfg, protected_cfg)


if __name__ == "__main__":
    main()
