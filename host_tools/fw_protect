#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Firmware Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import json
import logging
import struct
from pathlib import Path

from util import print_banner, FIRMWARE_ROOT, LOG_FORMAT, PRIVATE_KEY, import_RSA_key_from_file, generate_signature

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_firmware(
    firmware_file: Path, version: int, release_message: str, protected_firmware: Path
):
    print_banner("SAFFIRe Firmware Protect Tool")

    # Read in the raw firmware binary
    log.info("Reading the firmware...")
    firmware_data = firmware_file.read_bytes()

    log.info("Packaging the firmware...")

    # Construct the metadata
    firmware_size = len(firmware_data)

    # There is no versioning data on the actual firmware size itself so we should sign the meta data instead.
    # Generate a signature:
    payload = struct.pack(">HI", version, firmware_size) + release_message.encode() + b"\x00"
    private_key = import_RSA_key_from_file(PRIVATE_KEY)
    signature = generate_signature(payload, private_key)

    # Create firmware storage structure
    data = {
        "firmware_size": firmware_size,
        "version_num": version,
        "release_msg": release_message,
        "firmware": firmware_data.hex(),
        "signature": signature.hex()
    }

    # Write to the meta-data file:
    with protected_firmware.open("w", encoding="utf8") as fd:
        json.dump(data, fd)
    
    log.info("Firmware protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--firmware", help="The name of the firmware image to protect.", required=True
    )
    parser.add_argument(
        "--version", help="The version of this firmware.", type=int, required=True
    )
    parser.add_argument(
        "--release-message", help="The release message of this firmware.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected firmware image.", required=True
    )

    args = parser.parse_args()

    # process command
    firmware_file = FIRMWARE_ROOT / args.firmware
    protected_firmware = FIRMWARE_ROOT / args.output_file
    protect_firmware(
        firmware_file, args.version, args.release_message, protected_firmware
    )


if __name__ == "__main__":
    main()
