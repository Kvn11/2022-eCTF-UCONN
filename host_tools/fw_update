#!/usr/bin/python3 -u

# 2022 eCTF
# Update Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import json
import logging
from pathlib import Path
import socket
import struct

from base64 import b64decode
from util import print_banner, send_packets, RESP_OK, FIRMWARE_ROOT, LOG_FORMAT, VERIFY_OK, VERIFY_FAIL

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def update_firmware(socket_number: int, firmware_file: Path):
    print_banner("SAFFIRe Firmware Update Tool")

    log.info("Reading firmware file...")
    with firmware_file.open("rb") as fw:
        data = json.load(fw)
        version_num: int = data["version_num"]
        release_msg: str = data["release_msg"]
        firmware = b64decode(data["firmware"].encode())
        firmware_size = int(data["firmware_size"])
        signature = b64decode(data["signature"].encode())
        firmware_hash = b64decode(data["firmware_hash"].encode())
        firmware_signature = b64decode(data["firmware_signature"].encode())

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        # Send update command
        log.info("Sending update command...")
        sock.send(b"U")

        # Receive bootloader acknowledgement
        log.info("Waiting for bootloader to enter update mode...")
        while sock.recv(1) != b"U":
            pass

        # Send the metadata signature
        sock.send(signature)
        signature_recv = sock.recv(1)
        if signature_recv != b'\x00':
            log.error("Bootloader metadata signature transfer failed")
        else:
            log.info("Bootloader metadata signature transfer success")

        sock.send(firmware_signature)
        signature_recv = sock.recv(1)
        if signature_recv != b'\x00':
            log.error("Bootloader firmware signature transfer failed")
        else:
            log.info("Bootloader firmware signature transfer success")

        log.info("Sending metadata")
        versize = struct.pack("<II", firmware_size, version_num) + firmware_hash + release_msg.encode() + b"\x00"
        sock.send(versize)


        verify_result = sock.recv(1)
        if verify_result == VERIFY_OK:
            log.info("Bootloader verified metadata successfully")
        elif verify_result == VERIFY_FAIL:
            log.error("Bootloader metadata signature incorrect")
            return
        else:
            log.error("Bootloader verification failed internally")
            return

        version_result = sock.recv(1)
        if version_result == RESP_OK:
            log.info("Bootloader version good")
        else:
            log.error("Bootloader version bad")
            return

        # Send packets
        log.info("Sending firmware packets...")
        send_packets(sock, firmware)

        verify_result = sock.recv(1)
        if verify_result == RESP_OK:
            log.info("Firmware updated\n")
        else:
            log.info("Firmware update failed\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--firmware-file", help="Name of the firmware image to load.", required=True
    )

    args = parser.parse_args()

    firmware_file = FIRMWARE_ROOT / args.firmware_file

    update_firmware(args.socket, firmware_file)


if __name__ == "__main__":
    main()
